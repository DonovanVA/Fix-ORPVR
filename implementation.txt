1. tracking
Human Object or Subcategory가 비디오 전체에서 중요한 Object 인지 판단하기 위해
해당 Object를 비디오에서 Tracking해야 한다.
Optical Flow 알고리즘 (ex. Lucas-Kanade)을 사용하거나, Neural Network을 이용하는 방법이 있을 것이다.
이 부분의 구현은 Instance Segmentation과 겹치는 부분이 있긴 하다.

1) Human Instance Tracking
등장하는 사람에 대한 Importance를 a. 프레임 단위 b. 비디오 단위 로 측정하는데,
a를 이용해 b를 구하려면 각 사람 인스턴스가 비디오 내 모든 프레임에서 동일한 ID를 가져야 한다.
사람이 비디오에서 사라졌다가 다시 나타났을 때는 다른 ID로 보아도 상관없다고 놓으면,
일단 한 번 등장했다 사라질 때 까지는 동일한 ID를 가지게 해야한다.
이를 위해 Video Object Tracking이 필요하다.

2) Subcategory Instance Tracking
우리는 backpack, handbag, suitcase, cell phone을 Subcategory로 두고 Segmentation 한다.
Subcategory는 사람이 소유할 수 있는 객체로, 비디오 내에서 사람이 소유하는 프레임이 있다면, 중요한 객체로 분류한다.
사물이 손에서 떠나가는 비디오에서 처럼 일정 시간만 소유하여도 이 것을 중요 객체로 분류하여야 자연스럽게 영상을 만들 수 있다.
이를 위해 Viedo Object Tracking이 필요하며, 추가로 사람 인스턴스와의 Proximity 알고리즘이 필요하다.

위 두가지를 위한 Tracking 알고리즘을 구현해야한다.

2. Object Relocation
방법으로 1) Original Coordinates 2) Offset Coordinates 3) Patch-based Adaptive Coordinates를 소개했는데,
이 방법들은 사람이 새로 등장하거나, 사라지는 영상들에 대해서는 부자연스러운 결과를 보인다.
따라서 새로운 Dynamic Relocation 방법을 고안한다.
1) 문제점 파악
사람의 등장, 사라짐에 따른 문제가 발생하는 이유는 배경이 세로는 그대로고 가로만 늘어난 영상이기 때문이다.
사람이 왼쪽에서 오른쪽으로 지나가며 등장하고 사라지는 640x480p 영상을 가정해보자. 이 때, 생성된 배경은 854x480p이다.
가로 : x 축, 세로 : y 으로 생각하면, 원 영상에서 사람이 x = 0 부터 x = 640을 지나 사라질 때,
1) Original Coordinate - x = 0에서 등장하여 x = 640에서 사라지게 된다. 왼쪽 등장은 자연스러우나 오른쪽 퇴장이 부자연스럽다.
2) Offset Coordinate - offset을 k라고 하면, x = k ~ x = 640+k 까지 이동하게 되므로 x = k 에서 등장하고, x = 640+k에서 사라진다. 따라서 왼쪽 등장, 오른쪽 퇴장 모두 부자연스럽다. k가 854-640 = 214 이면 오른쪽 퇴장은 자연스럽고, 왼쪽 등장이 부자연스럽게 된다.
3) Patch-based Adaptive Coordinate - 왼쪽, 오른쪽 등장에 대해서 자연스럽게 되지만, Center Patch와 Edge Patch 간 전환 시 객체가 크게 이동한다.
새로 고안하는 Dynamic Relocation은 객체에서의 비율에 집중한다.
왼쪽 경계에서 완전히 벗어났는지는 박스 왼쪽 좌표로, 오른쪼 경계에 대해서는 박스 오른쪽 좌표로 하고, 객체 중심은 박스 좌표의 중심으로 한다.
객체 중심이 영상 좌측 경계로 부터 얼마나 벗어났는지에 대한 비율로 위치를 계산한다.
각 객체는 프레임에서 두 상황으로 나뉘는데,
1. 객체가 경계에 걸쳐있는 상황 - 왼쪽이면 왼쪽에 붙어서, 오른쪽이면 오른쪽에 붙어서
2. 객체가 경계에서 완전히 벗어난 상황 - 원 영상 내 위치 비율대로 이동
1-2 프레임 전환 속에서 객체 중심 위치로 결정하면, 전환에 따른 순간 이동이 발생하는데, 이를 속도의 개념으로 해결한다.


처리 과정
1. 객체 추적
이전 프레임에서 다음 프레임으로 전환될 때 객체가 가장자리에서 중간으로 들어오는 경우를 감지해야함.
이를 위해서 각 객체가 이전 프레임에서 어떤 인덱스였는지 알아야 한다. (가장자리, 안쪽 상관없이 모두)

[[288, 300, 368, 480], [27, 261, 102, 480], [404, 301, 504, 480], [0, 224, 46, 405]] [[324, 307, 388, 480], [57, 273, 128, 480], [430, 308, 528, 480], [0, 238, 74, 480]]
compareHist  [0 1 2 3]
SSIM         [0 1 2 1]
RMSE         [0 1 2 1]
SRE          [0 1 2 1]
91
[[324, 307, 388, 480], [57, 273, 128, 480], [430, 308, 528, 480], [0, 238, 74, 480]] [[341, 317, 404, 480], [73, 291, 147, 480], [451, 317, 546, 480], [0, 260, 92, 480]]
compareHist  [0 1 2 3]
SSIM         [0 1 2 3]
RMSE         [0 1 2 3]
SRE          [0 1 2 3]
92
[[341, 317, 404, 480], [73, 291, 147, 480], [451, 317, 546, 480], [0, 260, 92, 480]] [[358, 325, 420, 480], [100, 308, 166, 480], [466, 322, 563, 480], [11, 280, 109, 480]]
compareHist  [0 1 2 3]
SSIM         [0 1 2 3]
RMSE         [0 1 2 3]
SRE          [0 1 2 3]
93
[[358, 325, 420, 480], [100, 308, 166, 480], [466, 322, 563, 480], [11, 280, 109, 480]] [[358, 326, 419, 480], [99, 315, 167, 480], [464, 321, 561, 480], [13, 290, 109, 480]]
compareHist  [0 1 2 3]
SSIM         [0 1 2 3]
RMSE         [0 1 2 3]
SRE          [0 1 2 3]
94
[[358, 326, 419, 480], [99, 315, 167, 480], [464, 321, 561, 480], [13, 290, 109, 480]] [[358, 327, 420, 480], [105, 322, 172, 480], [462, 320, 560, 480], [17, 297, 112, 480]]
compareHist  [0 1 2 3]
SSIM         [0 1 2 3]
RMSE         [0 1 2 3]
SRE          [0 1 2 3]
95
[[358, 327, 420, 480], [105, 322, 172, 480], [462, 320, 560, 480], [17, 297, 112, 480]] [[350, 328, 410, 480], [92, 325, 166, 480], [449, 319, 548, 480], [12, 301, 105, 480]]
compareHist  [0 3 2 3]
SSIM         [0 1 2 3]
RMSE         [0 1 2 3]
SRE          [0 1 2 3]
96
[[350, 328, 410, 480], [92, 325, 166, 480], [449, 319, 548, 480], [12, 301, 105, 480]] [[64, 320, 136, 480], [412, 310, 511, 480], [318, 319, 379, 480], [0, 296, 74, 480]]
compareHist  [2 0 1 3]
SSIM         [2 0 1 3]
RMSE         [2 0 1 3]
SRE          [2 0 1 3]
97
[[64, 320, 136, 480], [412, 310, 511, 480], [318, 319, 379, 480], [0, 296, 74, 480]] [[293, 306, 358, 480], [50, 307, 120, 480], [388, 297, 488, 480], [0, 284, 55, 480]]
compareHist  [1 2 0 3]
SSIM         [1 2 0 3]
RMSE         [1 2 0 3]
SRE          [1 2 0 3]
98
[[293, 306, 358, 480], [50, 307, 120, 480], [388, 297, 488, 480], [0, 284, 55, 480]] [[33, 307, 106, 480], [278, 303, 343, 480], [367, 290, 470, 480], [0, 284, 40, 480]]
compareHist  [1 0 2 3]
SSIM         [1 0 2 3]
RMSE         [1 0 2 3]
SRE          [1 0 2 3]